---
- name: config
  hosts: localhost
  gather_facts: true
  # default config, can be overriden by setting envs in overlay.yaml
  vars:
    upgrade: false
    docker: false
    ollama: false
    homebrew_packages: []
    flatpak_apps: []

  # grab the config for this particular hostname
  vars_files:
  - "{{ lookup('env', 'HOME') }}/.config/{{ ansible_hostname }}.yaml"

  tasks:

    - name: Update the package cache
      become: true
      apt:
        update_cache: yes

    - name: Install Homebrew and Flatpak
      block:
        - name: Ensure git and curl are installed
          become: true
          apt:
            name:
              - git
              - curl
            state: present
        - name: Install Homebrew
          when: homebrew_packages | length > 0 
          shell: |
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          args:
            creates: /home/linuxbrew/.linuxbrew/bin/brew

        - name: Install Flatpak
          when: flatpak_apps | length > 0 
          become: true
          apt:
            name: flatpak
            state: present
        - name: check flatpak repos
          command: flatpak remotes
          register: flatpak_remotes
        - name: Add Flathub repository
          shell: |
            flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          when: "'flathub' not in flatpak_remotes.stdout"


    - name: Docker
      when: docker
      block:
      - name: Install Docker using the official script
        shell: |
          curl -fsSL https://get.docker.com | bash
        args:
          creates: /usr/bin/docker

      - name: Add current user to the Docker group
        become: true
        user:
          name: "{{ lookup('env', 'USER') }}"
          groups: docker
          append: true



    - name: Install Homebrew packages
      when: homebrew_packages | length > 0 
      shell: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)" && \
        brew install {{ item }}
      with_items: "{{ homebrew_packages }}"
      args:
        creates: /home/linuxbrew/.linuxbrew/bin/{{ item }}
      register: result
      failed_when:
        - '"Error" in result.stderr'


    - name: Install Flatpak applications
      when: flatpak_apps | length > 0 
      with_items: "{{ flatpak_apps }}"
      shell: |
        flatpak install -y flathub {{ item }}
      args:
        creates: "{{ lookup('env', 'HOME') }}/.var/app/{{ item }}"



    - name: Ollama
      when: ollama
      block:
      - name: Install Ollama using the official script
        shell: |
          curl -fsSL https://ollama.com/install.sh | bash
        args:
          executable: /bin/bash
          creates: /usr/local/bin/ollama
        when: ollama
      - name: check ollama models
        command: ollama ls
        register: ollama_models
      - name: Build devops IA
        shell: |
          ollama create devops -f {{ lookup('env', 'HOME') }}/.config/Modelfile
        args:
          executable: /bin/bash
        when: "'devops' not in ollama_models.stdout"


    - name: Install dotfiles
      shell: |
        curl -sfL https://raw.githubusercontent.com/k0rventen/.dotfiles/main/.config/setup.sh | sh
      args:
        executable: /bin/bash
        creates: "{{ lookup('env', 'HOME') }}/.dotfiles"


    - name: set fish as default shell
      become: true
      user:
        name: "{{ lookup('env', 'USER') }}"
        shell: /home/linuxbrew/.linuxbrew/bin/fish

    - name: Upgrade packages, homebrew and flatpaks
      when: upgrade
      block:
      - name: Upgrade apt packages
        become: true
        apt:
          upgrade: dist
      - name: Update homebrew
        when: homebrew_packages | length > 0 
        shell: brew update && brew upgrade

      - name: Update flatpaks
        when: flatpak_apps | length > 0 
        shell: flatpak update -y

